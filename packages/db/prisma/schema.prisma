generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Note {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    userId    String
}

model Therapist {
    id                   String               @id @default(cuid())
    createdAt            DateTime             @default(now())
    name                 String
    status               TherapistStatus      @default(PENDENT)
    dateOfBirth          DateTime
    document             String
    phone                String
    crp                  String
    about                String?
    gender               Gender               @default(MALE)
    hourlyRate           Float
    yearsOfExperience    String?
    profilePictureUrl    String
    userId               String               @unique
    paymentAccountId     String?
    paymentAccountStatus PaymentAccountStatus @default(UNACTIVE)
    modalities           Modality[]
    address              Address?
    education            Education[]
    methodologies        Methodology[]
    appointments         Appointment[]
    hours                Hour[]
}

model Methodology {
    id          String    @id @default(cuid())
    name        String
    description String
    therapistId String    @unique
    therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model Education {
    id          String    @id @default(cuid())
    institution String
    degree      String
    startAt     DateTime?
    endAt       DateTime?
    therapistId String    @unique
    therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model Address {
    id           String    @id @default(cuid())
    street       String
    number       String
    complement   String?
    neighborhood String
    city         String
    state        String
    country      String
    zipCode      String
    latitude     Float?
    longitude    Float?
    therapistId  String    @unique
    therapist    Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model Appointment {
    id          String            @id @default(cuid())
    scheduledTo DateTime
    scheduledAt DateTime          @default(now())
    modality    Modality
    status      AppointmentStatus @default(PENDENT)
    hourlyRate  Float
    link        String?
    isPaid      Boolean           @default(false)
    eventId     String?
    patientId   String
    patient     Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
    therapistId String
    therapist   Therapist         @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model Hour {
    id          String     @id @default(cuid())
    startAt     Int
    weekDay     WeekDay
    Therapist   Therapist? @relation(fields: [therapistId], references: [id], onDelete: Cascade)
    therapistId String?
}

model Patient {
    id                String        @id @default(cuid())
    createdAt         DateTime      @default(now())
    name              String
    email             String        @unique
    profilePictureUrl String
    userId            String        @unique
    paymentAccountId  String?
    appointments      Appointment[]
}

model Email {
    id        String   @id @default(cuid())
    email     String   @unique
    createdAt DateTime @default(now())
}

enum Modality {
    ONLINE
    ON_SITE
}

enum Gender {
    FEMALE
    MALE
}

enum AppointmentStatus {
    PENDENT
    ACCEPTED
    REJECTED
    CANCELED
}

enum PaymentAccountStatus {
    ACTIVE
    UNACTIVE
}

enum WeekDay {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
}

enum TherapistStatus {
    PENDENT
    ACCEPTED
    REJECTED
    CANCELED
}
