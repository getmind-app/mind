// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    notes         Note[]
    accounts      Account[]
    sessions      Session[]
}

model Note {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Therapist {
    id                String        @id @default(cuid())
    createdAt         DateTime      @default(now())
    name              String
    dateOfBirth       DateTime
    document          String
    crp               String
    about             String?
    hourlyRate        Float
    yearsOfExperience Int
    userId            String?
    address           Address?
    education         Education[]
    methodologies     Methodology[]
    appointments      Appointment[]
}

model Methodology {
    id          String    @id @default(cuid())
    name        String
    description String
    therapistId String    @unique
    therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model Education {
    id          String    @id @default(cuid())
    institution String
    degree      String
    startAt     DateTime?
    endAt       DateTime?
    therapistId String    @unique
    therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model Address {
    id           String    @id @default(cuid())
    street       String
    number       String
    complement   String?
    neighborhood String
    city         String
    state        String
    country      String
    zipCode      String
    therapistId  String    @unique
    therapist    Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

// Modality, Link, Address
model Appointment {
    id          String    @id @default(cuid())
    scheduledTo DateTime
    scheduledAt DateTime  @default(now())
    userId      String
    therapistId String
    therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
