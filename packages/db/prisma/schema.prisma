generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

model Note {
    id        String   @id @default(cuid())
    patientId String
    patient   Patient  @relation(fields: [patientId], references: [id], onDelete: NoAction)
    files     Bytes[]
    content   String
    userId    String
    createdAt DateTime @default(now())
}

model Therapist {
    id                   String               @id @default(cuid())
    createdAt            DateTime             @default(now())
    name                 String
    status               TherapistStatus      @default(PENDENT)
    dateOfBirth          DateTime
    document             String
    phone                String
    crp                  String
    about                String?
    gender               Gender               @default(MALE)
    hourlyRate           Float
    yearsOfExperience    String?
    profilePictureUrl    String
    userId               String               @unique
    paymentAccountId     String?
    pixKey               String?
    paymentAccountStatus PaymentAccountStatus @default(UNACTIVE)
    modalities           Modality[]
    address              Address?
    education            String?
    methodologies        String[]
    appointments         Appointment[]
    hours                Hour[]
    recurrences          Recurrence[]
}

model Address {
    id           String    @id @default(cuid())
    street       String
    number       String
    complement   String?
    neighborhood String
    city         String
    state        String
    country      String
    zipCode      String
    latitude     Float?
    longitude    Float?
    therapistId  String    @unique
    therapist    Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model Appointment {
    id                  String            @id @default(cuid())
    scheduledTo         DateTime
    scheduledAt         DateTime          @default(now())
    modality            Modality
    status              AppointmentStatus @default(PENDENT)
    hour                Hour              @relation(fields: [hourId], references: [id])
    hourId              String
    link                String?
    isPaid              Boolean           @default(false)
    paidAt              DateTime?
    rate                Float
    eventId             String?
    patientId           String
    patient             Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
    therapistId         String
    therapist           Therapist         @relation(fields: [therapistId], references: [id], onDelete: Cascade)
    recurrence          Recurrence?       @relation(fields: [recurrenceId], references: [id], onDelete: Cascade)
    recurrenceId        String?
    type                AppointmentType
    rescheduleRequested Boolean           @default(false)
}

model Hour {
    id          String        @id @default(cuid())
    startAt     Int
    weekDay     WeekDay
    Therapist   Therapist?    @relation(fields: [therapistId], references: [id], onDelete: Cascade)
    therapistId String?
    Recurrence  Recurrence[]
    Appointment Appointment[]
}

model Patient {
    id                String        @id @default(cuid())
    createdAt         DateTime      @default(now())
    name              String
    email             String        @unique
    document          String
    profilePictureUrl String
    userId            String        @unique
    paymentAccountId  String?
    appointments      Appointment[]
    Recurrence        Recurrence[]
    Note              Note[]
}

model Email {
    id        String   @id @default(cuid())
    email     String   @unique
    createdAt DateTime @default(now())
}

model Recurrence {
    id              String           @id @default(cuid())
    createdAt       DateTime         @default(now())
    startAt         DateTime         @db.Date
    startTime       DateTime         @db.Time
    endTime         DateTime         @db.Time
    hour            Hour             @relation(fields: [hourId], references: [id], onDelete: Cascade)
    weekDay         WeekDay
    patientId       String
    patient         Patient          @relation(fields: [patientId], references: [id], onDelete: Cascade)
    therapistId     String
    therapist       Therapist        @relation(fields: [therapistId], references: [id], onDelete: Cascade)
    defaultModality Modality
    status          RecurrenceStatus @default(PENDENT)
    frequency       Frequency        @default(WEEKLY)
    Appointment     Appointment[]
    hourId          String
}

enum Frequency {
    WEEKLY
    BIWEEKLY
    MONTHLY
    CUSTOM
}

enum Modality {
    ONLINE
    ON_SITE
}

enum Gender {
    FEMALE
    MALE
}

enum RecurrenceStatus {
    PENDENT
    ACCEPTED
    REJECTED
    CANCELED
}

enum AppointmentStatus {
    PENDENT
    ACCEPTED
    REJECTED
    CANCELED
}

enum AppointmentType {
    SINGLE
    SINGLE_REPEATED
    RECURRENT
    FIRST_IN_RECURRENCE
}

enum PaymentAccountStatus {
    ACTIVE
    UNACTIVE
}

enum WeekDay {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
}

enum TherapistStatus {
    PENDENT
    ACCEPTED
    REJECTED
    CANCELED
}
